<?php
/**
 * @file
 * Functions used to install the analysis: expression module.
 */

/**
 * Implements hook_requirements().
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_requirements($phase) {
  $requirements = [];
  if ($phase == 'install') {
    // Make sure chado is installed.
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements['tripal_protocol'] = [
        'title' => "tripal_protocol",
        'value' => "ERROR: Chado must be installed before this module can be enabled",
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }
  return $requirements;
}

/**
 * Implements install_hook().
 *
 * Permforms actions when the module is first installed.
 *
 * @ingroup tripal_analysis_module
 */
function tripal_protocol_install() {

  // Get localization function for installation.
  $t = get_t();

  tripal_protocol_add_cvs();
  tripal_protocol_add_cvterms();
  // Make sure the arraydesign, biomateria, and protocol chado tables are a set
  // as base tables. This allows the tables to be used as base tables in
  // Drupal Views.
  $update = db_update('tripal_views')->fields([
    'base_table' => 1,
  ])->condition('table_name', 'arraydesign', '=')->execute();
  $update = db_update('tripal_views')->fields([
    'base_table' => 1,
  ])->condition('table_name', 'protocol', '=')->execute();


  tripal_protocol_add_new_cvterms_entity();
  tripal_protocol_add_cvterms_entity_for_array_design();

}

/**
 * Add controlled vocabulary terms used by this module.
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_add_cvs() {
  // CVs for the array design content type.
  tripal_insert_cv('arraydesign_property', 'Contains property terms for arraydesigns.');

// Let's not do this.

//  tripal_insert_cv('arraydesign_platformtype', 'Contains microarray platform types.');
//  tripal_insert_cv('arraydesign_substratetype', 'Contains microarray substrate types.');

  // CVs for the protocol content type.
  tripal_insert_cv('protocol_type', 'Contains protocol type.');
}

/**
 * Implements hook_schema().
 *
 * This function implements the hook schema for arraydesign
 * and protocol content types.
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_schema() {
  $schema = [];
  if (!db_table_exists('chado_arraydesign')) {
    $schema['chado_arraydesign'] = [
      'fields' => [
        'vid' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'nid' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'arraydesign_id' => [
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ],
      ],
      'indexes' => [
        'arraydesign_id' => ['arraydesign_id'],
      ],
      'unique keys' => [
        'nid_vid' => ['nid', 'vid'],
        'vid' => ['vid'],
      ],
      'primary key' => ['nid'],
    ];
    $schema['chado_protocol'] = [
      'fields' => [
        'vid' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'nid' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'protocol_id' => [
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ],
      ],
      'indexes' => [
        'protocol_id' => ['protocol_id'],
      ],
      'unique keys' => [
        'nid_vid' => ['nid', 'vid'],
        'vid' => ['vid'],
      ],
      'primary key' => ['nid'],
    ];
  }
  return $schema;
}

/**
 * Add cvterms related to the protocols module.
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_add_cvterms() {

  tripal_insert_cvterm([
    'name' => 'photochemical_oligo',
    'def' => 'in-situ photochemically synthesized oligoes',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'glass',
    'def' => 'glass array',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'Acquisition Protocol',
    'def' => 'protocol for an acquisition',
    'cv_name' => 'protocol_type',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'Array Design Protocol',
    'def' => 'protocol for an arraydesign',
    'cv_name' => 'protocol_type',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'Assay Protocol',
    'def' => 'protocol for an assay',
    'cv_name' => 'protocol_type',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'Quantification Protocol',
    'def' => 'protocol for a quantification',
    'cv_name' => 'protocol_type',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_organism_id',
    'def' => 'The organism_id of the organism associated with an expression experiment',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_associated_analysis_id',
    'def' => 'The analysis_id of another analysis associated with an expression experiment',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_biosourceprovider_id',
    'def' => 'The contact_id of the contact who provided the biomaterial for an expression experiment',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_arraydesign_id',
    'def' => 'The arraydesign_id of the arraydesign associated with an expression experiment',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_assay_id',
    'def' => 'The assay_id of the assay associated with an expression experiment',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_acquisition_id',
    'def' => 'The acquisition_id of the acquisition associated with an expression experiment',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_quantification_id',
    'def' => 'The quantification_id of the quantification associated with an expression experiment',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_filetype',
    'def' => 'The file type of the expression data to be loaded. The file type can be either column or matrix',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_submit_job',
    'def' => 'A value that indicates whether an expression loading job should be submitted.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_fileext',
    'def' => 'The file extension of the expression files to be loaded',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_filepath',
    'def' => 'The file path of the expression files to be loaded',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_re_start',
    'def' => 'A regular expression to specify the line that imediately preceeds the start of expresion data in an expression file.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_re_end',
    'def' => 'A regular expression to specify the line that imediately follows the end of expresion data in an expression file.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_feature_uniquenames',
    'def' => 'Use feature uniquenames to associate expression data with biomaterials.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_assaydate',
    'def' => 'The date an assay is run.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_assay_description',
    'def' => 'The description of an assay.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_acquisitiondate',
    'def' => 'The date an acquisition is run.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_acquisition_uri',
    'def' => 'URI location that describes the acquisition.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_quantificationdate',
    'def' => 'The date an quantification is run.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_quantification_uri',
    'def' => 'URI location that describes the quantification.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_assay_protocol_id',
    'def' => 'The protocol id associated with an assay.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_acquisition_protocol_id',
    'def' => 'The protocol id associated with an acquisition.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_quantification_protocol_id',
    'def' => 'The protocol id associated with a quantification.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_assay_operator_id',
    'def' => 'The operator id associated with an assay.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'analysis_expression_quantification_operator_id',
    'def' => 'The operator id associated with a quantification.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ]);
  tripal_insert_cvterm([
    'name' => 'unit_of_measure',
    'def' => 'A unit of measure is a quantity which is a standard of measurement for some dimension. For example, the Meter is a Unit O fMeasure for the dimension of length, as is the Inch. There is no intrinsic property of a UnitOfMeasure that makes it primitive or fundamental; rather, a system of units (e.g. Systeme International Unit) defines a set of orthogonal dimensions and assigns units for each. [ SUMO:unit of measure ].',
    'cv_name' => 'sep',
    'db_name' => 'SEP',
  ]);
}

/**
 * Implements hook_uninstall().
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_uninstall() {

}

function tripal_protocol_add_new_cvterms_entity() {
  tripal_insert_cvterm([
    'id' => 'sep:00101',
    'name' => 'protocol',
    'cv_name' => 'sep',
    'definition' => 'A protocol is a process which is a parameterizable description of a process.',
  ]);

  // protocol.uri
  $term = tripal_insert_cvterm([
    'id' => 'schema:url',
    'name' => 'url',
    'cv_name' => 'schema',
    'definition' => 'URL of the item.',
  ]);
  tripal_associate_chado_semweb_term('protocol', 'uri', $term);

  // protocol.protocoldescription
  $term = tripal_insert_cvterm([
    'id' => 'local:protocol_description',
    'name' => 'protocol_description',
    'cv_name' => 'local',
    'definition' => 'A description of the protocol.',
  ]);
  tripal_associate_chado_semweb_term('protocol', 'protocoldescription', $term);

  // protocol.hardwaredescription
  $term = tripal_insert_cvterm([
    'id' => 'local:hardware_description',
    'name' => 'hardware_description',
    'cv_name' => 'local',
    'definition' => 'A description of the hardware.',
  ]);
  tripal_associate_chado_semweb_term('protocol', 'hardwaredescription', $term);

  // protocol.softwaredescription
  $term = tripal_insert_cvterm([
    'id' => 'local:software_description',
    'name' => 'software_description',
    'cv_name' => 'local',
    'definition' => 'A description of the software.',
  ]);
  tripal_associate_chado_semweb_term('protocol', 'softwaredescription', $term);

  // Create the 'Protocol' entity type. This uses the sep:00101 term.
  $error = [];
  $args = [
    'vocabulary' => 'sep',
    'accession' => '00101',
    'term_name' => 'protocol',
    'storage_args' => [
      'data_table' => 'protocol',
    ],
  ];
  $term = tripal_load_term_entity([
    'vocabulary' => $args['vocabulary'],
    'accession' => $args['accession'],
  ]);
  $bundle = tripal_load_bundle_entity(['term_id' => $term->id]);
  if (!$term or !$bundle) {
    if (!tripal_create_bundle($args, $error)) {
      throw new Exception($error['!message']);
    }
  }
}

function tripal_protocol_add_cvterms_entity_for_array_design() {
  // arraydesign.name
  $term = tripal_insert_cvterm([
    'id' => 'schema:name',
    'name' => 'name',
    'cv_name' => 'schema',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'name', $term);

  // arraydesign.version
  $term = tripal_insert_cvterm([
    'id' => 'local:array_design_version',
    'name' => 'array_design_version',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'version', $term);

  // arraydesign.description
  $term = tripal_insert_cvterm([
    'id' => 'local:array_design_description',
    'name' => 'array_design_description',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'description', $term);

  // arraydesign.array_dimensions
  $term = tripal_insert_cvterm([
    'id' => 'local:array_dimensions',
    'name' => 'array_dimensions',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'array_dimensions', $term);
  // arraydesign.element_dimensions
  $term = tripal_insert_cvterm([
    'id' => 'local:element_dimensions',
    'name' => 'element_dimensions',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'element_dimensions', $term);
  // arraydesign.num_of_elements
  $term = tripal_insert_cvterm([
    'id' => 'local:num_of_elements',
    'name' => 'num_of_elements',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'num_of_elements', $term);
  // arraydesign.num_array_columns
  $term = tripal_insert_cvterm([
    'id' => 'local:num_array_columns',
    'name' => 'num_array_columns',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'num_array_columns', $term);

  // arraydesign.num_array_rows
  $term = tripal_insert_cvterm([
    'id' => 'local:num_array_rows',
    'name' => 'num_array_rows',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'num_array_rows', $term);

  // arraydesign.num_grid_columns
  $term = tripal_insert_cvterm([
    'id' => 'local:num_grid_columns',
    'name' => 'num_grid_columns',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'num_grid_columns', $term);

  // arraydesign.num_grid_rows
  $term = tripal_insert_cvterm([
    'id' => 'local:num_grid_rows',
    'name' => 'num_grid_rows',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'num_grid_rows', $term);

  // arraydesign.num_sub_columns
  $term = tripal_insert_cvterm([
    'id' => 'local:num_sub_columns',
    'name' => 'num_sub_columns',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'num_sub_columns', $term);

  // arraydesign.num_sub_rows
  $term = tripal_insert_cvterm([
    'id' => 'local:num_sub_rows',
    'name' => 'num_sub_rows',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'num_sub_rows', $term);

  // arraydesign.manufacturer_id
  $term = tripal_insert_cvterm([
    'id' => 'local:manufacturer_id',
    'name' => 'manufacturer_id',
    'cv_name' => 'local',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'manufacturer_id', $term);

  // arraydesign.platformtype_id
  $term = tripal_insert_cvterm([
    'id' => 'OBI:microarray_platform',
    'name' => 'microarray_platform',
    'cv_name' => 'OBI',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'platformtype_id', $term);

  // arraydesign.substratetype_id
  $term = tripal_insert_cvterm([
    'id' => 'EFO:substrate',
    'name' => 'substrate',
    'cv_name' => 'EFO',
  ]);
  tripal_associate_chado_semweb_term('arraydesign', 'substratetype_id', $term);

//  // arraydesign.protocol_id
  //Superseded by new tripal chado field

//  $term = tripal_insert_cvterm([
//    'id' => 'local:protocol_id',
//    'name' => 'protocol_id',
//    'cv_name' => 'local',
//  ]);
//  tripal_associate_chado_semweb_term('arraydesign', 'protocol_id', $term);

  // Create the 'Array Design' entity type. This uses the EFO:0000269 term.
  tripal_insert_cvterm([
    'id' => 'EFO:0000269',
    'name' => 'array design',
    'cv_name' => 'EFO',
    'definition' => 'A protocol is a process which is a parameterizable description of a process.',
  ]);
  $error = [];
  $args = [
    'vocabulary' => 'EFO',
    'accession' => '0000269',
    'term_name' => 'array design',
    'storage_args' => [
      'data_table' => 'arraydesign',
    ],
  ];
  $term = tripal_load_term_entity([
    'vocabulary' => $args['vocabulary'],
    'accession' => $args['accession'],
  ]);
  $bundle = tripal_load_bundle_entity(['term_id' => $term->id]);
  if (!$term or !$bundle) {
    if (!tripal_create_bundle($args, $error)) {
      throw new Exception($error['!message']);
    }
  }

}


/**
 * Create protocol bundle.
 */
function tripal_protocol_update_7201() {
  // Insert semweb cvterms for protocol table
  tripal_protocol_add_new_cvterms_entity();
}

/**
 * Create array design bundle.
 */
function tripal_protocol_update_7202() {
  // Insert semweb cv terms for chado.arraydesign table

  tripal_protocol_add_cvterms_entity_for_array_design();
}

/**
 * Add the unit of measure cvterm.
 */
function tripal_protocol_update_7203() {
  tripal_insert_cvterm([
    'name' => 'unit_of_measure',
    'def' => 'A unit of measure is a quantity which is a standard of measurement for some dimension. For example, the Meter is a Unit O fMeasure for the dimension of length, as is the Inch. There is no intrinsic property of a UnitOfMeasure that makes it primitive or fundamental; rather, a system of units (e.g. Systeme International Unit) defines a set of orthogonal dimensions and assigns units for each. [ SUMO:unit of measure ].',
    'cv_name' => 'sep',
    'db_name' => 'SEP',
  ]);
}
