<?php
/**
 * @file
 * Basic functionality for the tripal analysis expression module.
 */

/**
 * @defgroup tripal_analysis_expression Tripal Analysis Expression
 * @ingroup tripal_modules
 */

require_once 'includes/HeatMapGenerator.inc';
require_once 'includes/tripal_analysis_expression.fields.inc';
require_once 'theme/tripal_analysis_expression.theme.inc';
require_once 'includes/feature_heatmap_form.inc';
require_once 'includes/analysis_expression_data_downloader.inc';
require_once 'includes/tripal_analysis_expression.api.inc';
require_once 'includes/tripal_analysis_expression.viewer.inc';

/**
 * Implements hook_permission().
 */
function tripal_analysis_expression_permission()
{
  return [
    'administer tripal analysis expression' => [
      'title' => t('Edit tripal analysis expression settings'),
      'description' => t('Edit tripal analysis expression settings'),
    ]
  ];
}

/**
 * Implements hook_help().
 *
 * Display help and module information.
 *
 * @ingroup tripal_analysis_expression
 */
function tripal_analysis_expression_help($path, $arg)
{
  switch ($path) {
    // Both of the following cases should display the below HTML.
    case 'admin/tripal/extension/tripal_analysis_expression/help' :
    case 'admin/help#tripal_analysis_expression' :
    {
      $ret_val = '<p>' . t('The expression module allows the user to load and display expression information.  It relies on the protocols and biomaterial modules to store the data in Chado.') . '</p>';
      $ret_val .= "<b>" . l(t("Expression Loader V3"),
          "loaders/Chado_Expression_Data_Loader") . "</b> - ";
      $ret_val .= t("The Tripal expression loader.  Data is loaded in matrix or column file format.  Expession data is associated with an analysis and biomaterial, and values are linked to individual features (generally an expression level in a biomaterial)<br><br>");

      return $ret_val;
      break;
    }
  }
}

/**
 * Implements hook_menu().
 *
 *  This function adds menus for the four content types created by the
 *  tripal analyis expression module as well a menu the configuration of
 *  expression data on feature pages. An admin list, sync, delete, TOC,
 *  settings, and help page is created for the following content types:
 *  analysis: expression, arraydesign, biomaterial, and protocol.
 *
 * @ingroup tripal_expression
 */
function tripal_analysis_expression_menu()
{
  $items = [];

  // Admin configuration group.
  $items['admin/tripal/extension/tripal_analysis_expression'] = [
    'title' => 'Expression Analysis',
    'description' => 'Administrative pages for the Tripal Expression Analysis module.',
    'access arguments' => ['administer tripal analysis expression'],
  ];

  //KEEP THIS
  // Heatmap settings
  $items['admin/tripal/extension/tripal_analysis_expression/heatmap_settings'] = [
    'title' => 'Expression Heatmap Search Settings',
    'description' => 'Administrative pages for the Tripal Analysis Expression heatmap search form.',
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_analysis_expression_heatmap_settings_form'],
  ];

  // Admin configuration - analysis_expression help.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression/help'] = [
    'title' => 'Help',
    'description' => "A description of the Tripal Analysis: Expression content type including a short description of it's usage.",
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'theme',
    'page arguments' => ['tripal_analysis_expression_help'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  ];

  $items['tripal/analysis-expression/heatmap/search'] = [
    'title' => '',
    'access arguments' => ['access content'],
    'page callback' => 'tripal_analysis_expression_search_features_callback',
    'type' => MENU_CALLBACK,
  ];

  $items['tripal/analysis-expression/download'] = [
    'title' => '',
    'page callback' => 'analysis_expression_data_downloader::callback',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];

  $items['tripal_analysis_expression/pvalue/cvterm/%/%'] = [
    'title' => 'Expression Analysis CVterm',
    'description' => 'P-value CV terms.',
    'access arguments' => ['access content'],
    'page arguments' => [3, 4],
    'page callback' => 'tripal_analysis_expression_cvterm',
  ];

  $items['tripal_analysis_expression/search_cvterm'] = [
    'title' => 'Search Features by CVterm',
    'description' => 'Search Features by CVterm.',
    'access arguments' => ['access content'],
    'page callback' => 'tripal_analysis_expression_feature_search_by_cvterm_page',
    'type' => MENU_CALLBACK,
  ];

  $items['tripal_analysis_expression/listpvalue'] = [
    'title' => 'List P-values',
    'description' => 'List associated p-values.',
    'access arguments' => ['access content'],
    'page callback' => 'tripal_analysis_expression_list_pvalue',
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 *  This function creates two tables on a custom page, linked to from
 *  the keyword on the significant expression page. The first table lists
 *  CVterm name, definition, and vocabulary, and the second lists associated
 *  features with p-values. A pager appears when there are greater than
 *  twenty features.
 *
 * @param int $cvterm_id cvterm id the user clicked on
 * @param int $organism_id organism of interest
 *
 * @return array
 *
 * @ingroup tripal_analysis_expression
 * @throws Exception
 *
 */

/**
 * Implements hook_schema().
 */

function tripal_analysis_expression_feature_search_query($search, $perPage)
{
  $pvalue_cvterm_id = chado_get_cvterm([ // get type_id of p-values. used in join to cvtermprop
    'name' => 'p-value',
  ])->cvterm_id;
  $evidence_code_cvterm_id = chado_get_cvterm([ // get type_id of expression relationship. used in join to cvtermprop
    'name' => 'evidence code',
  ])->cvterm_id;
  $query = chado_db_select('cvterm', 'cv');
  $query->fields('f', ['name', 'feature_id', 'organism_id']);
  $query->fields('fp', ['value']); // p-values (shares 'value' column in the table feature_cvtermprop)
  $query->fields('fp2', ['value']); // expression relationship (shares 'value' column in the table feature_cvtermprop)
  $query->fields('cv', ['name']);
  $query->fields('fc', ['cvterm_id', 'feature_id']);
  $query->join('feature_cvterm', 'fc', 'cv.cvterm_id = fc.cvterm_id');
  $query->join('feature', 'f', 'fc.feature_id = f.feature_id');
  $query->join('feature_cvtermprop', 'fp', 'fc.feature_cvterm_id = fp.feature_cvterm_id AND fp.type_id = :typeid', [':typeid' => $pvalue_cvterm_id]);
  $query->join('feature_cvtermprop', 'fp2', 'fp.feature_cvterm_id = fp2.feature_cvterm_id AND fp2.type_id = :typeid2', [':typeid2' => $evidence_code_cvterm_id]);
  $query->condition('cv.name', '%' . db_like($search) . '%', 'LIKE');

  $total = $query->countQuery()->execute()->fetchField();
  $page = pager_default_initialize($total, $perPage);
  $query->range($page * $perPage, $perPage);
  $result = $query->execute();
  return [$result, $total];
}

function tripal_analysis_expression_feature_search_by_cvterm_page()
{
  // run query
  $arr = drupal_get_form('expression_search_form');
  $searchQuery = $arr['keyword']['#value'];
  $result_array = tripal_analysis_expression_feature_search_query($searchQuery, 10);
  $result = $result_array[0];
  $total = $result_array[1];

  // build table
  $rows = [];
  while ($record = $result->fetchAssoc()) {
    $rows[] = [
      l($record['name'], 'bio_data/' . chado_get_record_entity_by_table('feature', $record['feature_id'])),
      l($record['cv_name'], 'tripal_analysis_expression/pvalue/cvterm/' . $record['cvterm_id'] . '/' . $record['organism_id']),
      $record['value'],
      $record['fp2_value'],
    ];
  }
  $feature_table = [
    'header' => ['Feature Name', 'CV term', 'P-value', 'Relationship'],
    'sort' => 'ASC',
    'rows' => $rows,
    'pager' => theme('pager', ['quantity', $total]),
  ];

  // format output
  $output = drupal_render($arr); // displays search box and button
  if (isset($rows) == true) {
    $output .= theme('table', $feature_table);
    $output .= $feature_table['pager'];
  }
  return $output;
}

function expression_search_form($form, &$form_state)
{
  $form['keyword'] = [
    '#type' => 'textfield',
    '#title' => t('Experimental Factor'),
    '#required' => TRUE,
    '#description' => t('What is this gene responding to (e.g. heat, drought, ozone)?'),
    '#autocomplete_path' => 'admin/tripal/storage/chado/auto_name/cvterm/0',
    '#default_value' => $_GET['keyword'] ?? '',
  ];
  // submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search CVterm',
    '#name' => 'submit_button',
  );
  $form['#method'] = 'get';
  return $form;
}

function expression_search_form_submit($form, &$form_state)
{
  // set the provided filter value in the storage
  $form_state['storage']['keyword'] = $form_state['values']['keyword'];
  // show the form again.
  $form_state['rebuild'] = TRUE;
}

function tripal_analysis_expression_cvterm($cvterm_id, $organism_id)
{
  // adding upper table which contains name, definition, and vocabulary
  $cv_term = chado_query('select cv.name as cv_name, cv.definition as cv_definition, db.name as db_name
                from {chado.cvterm} cv
                join {chado.dbxref} dbx on dbx.dbxref_id=cv.dbxref_id
                join {chado.db} db on db.db_id=dbx.db_id
                where cvterm_id=:cvterm_id',
    [':cvterm_id' => $cvterm_id])->fetchObject();

  $rows = [];
  $rows[] = [
    [
      'data' => 'name',
      'header' => TRUE,
      'width' => '20%',
    ],
    $cv_term->cv_name,
  ];
  $rows[] = [
    [
      'data' => 'definition',
      'header' => TRUE,
      'width' => '20%',
    ],
    $cv_term->cv_definition,
  ];
  $rows[] = [
    [
      'data' => 'vocabulary',
      'header' => TRUE,
      'width' => '20%',
    ],
    l($cv_term->db_name, '/cv/lookup/' . $cv_term->db_name),
  ];
  $table = [ // upper table on page, printing cvterm name, definition, and vocabulary
    'header' => [],
    'rows' => $rows,
  ];

  $organism = chado_get_organism([
    'organism_id' => $organism_id,
  ]);
  $scientific_name = $organism->genus . " " . $organism->species; // name print between tables

  $pvalue_cvterm_id = chado_get_cvterm([ // get type_id of p-values. used in join to cvtermprop
    'name' => 'p-value',
  ])->cvterm_id;
  $evidence_code_cvterm_id = chado_get_cvterm([ // get type_id of expression relationship. used in join to cvtermprop
    'name' => 'evidence code',
  ])->cvterm_id;

  $header = [
    ['data' => 'Features', 'field' => 'f.name', 'sort' => 'ASC'],
    ['data' => 'P-value', 'field' => 'fp.value', 'sort' => 'ASC'],
    ['data' => 'Expression Relationship', 'field' => 'fp2.value', 'sort' => 'ASC'],
  ];
  // adding table of features
  $query = chado_db_select('feature', 'f')
    #->extend('PagerDefault')
    ->extend('TableSort');
  $query->fields('f', array('name', 'feature_id')); //feature name and id for link
  $query->fields('fp', array('value')); // p-values (shares 'value' column in the table feature_cvtermprop)
  $query->fields('fp2', array('value')); // expression relationship (shares 'value' column in the table feature_cvtermprop)
  $query->fields('fc', array('feature_cvterm_id'));
  $query->join('feature_cvterm', 'fc', 'f.feature_id = fc.feature_id AND fc.cvterm_id = :cvtermid', [':cvtermid' => $cvterm_id]);
  $query->join('feature_cvtermprop', 'fp', 'fc.feature_cvterm_id = fp.feature_cvterm_id AND fp.type_id = :typeid', [':typeid' => $pvalue_cvterm_id]);
  $query->join('feature_cvtermprop', 'fp2', 'fp.feature_cvterm_id = fp2.feature_cvterm_id AND fp2.type_id = :typeid2', [':typeid2' => $evidence_code_cvterm_id]);
  $query->join('cvterm', 'cv', 'cv.cvterm_id = fp.type_id');

  #$query->join('feature_cvtermprop', 'fp', 'fc.feature_cvterm_id = fp.feature_cvterm_id AND fp.type_id = :typeid', [':typeid' => $pvalue_cvterm_id]);
  #$query->join('feature_cvtermprop', 'fp2', 'fp.feature_cvterm_id = fp2.feature_cvterm_id AND fp2.type_id = :typeid2', [':typeid2' => $evidence_code_cvterm_id]);

  $query->condition('organism_id', $organism_id, '=');
  $query->orderByHeader($header);
  $total = $query->countQuery()->execute()->fetchField();
  $page = pager_default_initialize($total, 20);
  $query->range($page * 20, 20);
  $feature_result = $query->execute();

  $feature_names = [];
  while ($record = $feature_result->fetchAssoc()) {
    $feature_names[] = [
      l($record['name'], 'bio_data/' . chado_get_record_entity_by_table('feature', $record['feature_id'])),
      $record['value'],
      $record['fp2_value'] # expression relationship (up- or down-regulated)
    ];
  }

  $feature_table = [
    'header' => $header,
    'sort' => 'ASC',
    'rows' => $feature_names,
    'pager' => theme('pager', ['quantity', $total]),
  ];

  // format output
  $content = theme('table', $table);          // upper table including cvterm name, definition, and vocabulary
  $content .= "The following is a list of " . $scientific_name . "'s features that are associated with " . $cv_term->cv_name . ".";
  $content .= theme('table', $feature_table); // table of features, p-values, and expression relationship
  $content .= $feature_table['pager'];              // pager
  drupal_set_title($cv_term->db_name . ': ' . $cv_term->cv_name);
  return [
    '#type' => 'markup',
    '#markup' =>  $content,
  ];
}

/**
 * Implements hook_theme().
 *
 * This function informs drupal of the themes included in this modules.
 *  An base, help, and teaser template are included for the four content
 *  types defined by this module: analysis: expression, arraydesign,
 *  biomaterial, and protocol. Additional templates include a protocol
 *  template for the analysis: expression content type and a variable
 *  expression template for the feature content type.
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 * @see \theme() for paramaters instructions
 *
 * @ingroup tripal_analysis_expression
 *
 */
function tripal_analysis_expression_theme($existing, $type, $theme, $path)
{
  $items = [
    'analysis_expression_plot' => [
      'variables' => [
        'features_count' => 0,
        'biomaterials_count' => 0,
        'analysis_id' => NULL,
      ],
      'template' => 'tripal_analysis_expression.analysis',
      'path' => "$path/theme/templates",
    ],
  ];

  return $items;
}

/*
 * Implement hook_block_info()
 * Define two blocks one for input features
 * the other one for display heatmap
 */
function tripal_analysis_expression_block_info()
{
  // Define two blocks: one for features input form
  // the other one for heatmap display
  $blocks = [];
  $blocks['input_features'] = [
    'info' => t('tripal_analysis_expression features form for heatmap'),
    //'status' => 0,
    'region' => 'content',
    'weight' => 24,
    'cache' => DRUPAL_NO_CACHE,
  ];

  $blocks['heatmap_features'] = [
    'info' => t('tripal_analysis_expression heatmap display'),
    //'status' => 0,
    'region' => 'content',
    'weight' => 25,
    'cache' => DRUPAL_NO_CACHE,
  ];

  return $blocks;
}

/**
 * Generate input block.
 *
 * @return string
 */
function tripal_analysis_expression_generate_feature_map_input_block()
{
  global $base_url;

  $content = '<div class="heatmap-columns">';
  $search_form = drupal_get_form('feature_heatmap_search_form');
  $content .= '<div class="heatmap-column is-5">' . render($search_form) . '</div>';
  $input_textarea = drupal_get_form('feature_heatmap_form');
  $content .= '<div class="heatmap-column">' . render($input_textarea) . '</div>';
  $content .= '</div>';

  drupal_add_css(drupal_get_path('module',
      'tripal_analysis_expression') . '/theme/css/feature_heatmap.css');
  drupal_add_js(['visual_expression_example' => variable_get('tripal_analysis_expression_heatmap_example')],
    ['type' => 'setting']);
  drupal_add_js(drupal_get_path('module',
      'tripal_analysis_expression') . '/theme/js/example.js');
  drupal_add_js(['heatmap_search' => ['base_url' => $base_url]],
    ['type' => 'setting']);
  drupal_add_js(drupal_get_path('module',
      'tripal_analysis_expression') . '/theme/js/heatmap-search.js');

  return $content;
}

/**
 * Implement hook_block_view()
 *
 * @throws \Exception
 */
function tripal_analysis_expression_block_view($delta = '')
{

  $block = [];
  switch ($delta) {
    case 'input_features':
      $block['subject'] = t('Feature Expression Visualization');
      $block['content'] = tripal_analysis_expression_generate_feature_map_input_block();
      break;
    case 'heatmap_features':
      if (isset($_GET['heatmap_feature_uniquename'])) {
        tripal_analysis_expression_heatmap_block($block);
      }
      break;
  }

  return $block;
}

/**
 * Builds the heatmap results block.
 * Should be called only when the `heatmap_feature_uniquename`
 * GET parameter is present.
 *
 * @param $block
 *
 * @throws \Exception
 */
function tripal_analysis_expression_heatmap_block(&$block)
{
  global $base_url;

  $heatmap = (new HeatMapGenerator())->generate();

  if ($heatmap === FALSE) {
    $block['content'] = '<p style="color: red">Please enter 2 or more features.</p>';
  } else {
    if (!empty($heatmap->data)) {
      $block['subject'] = t('Feature Expression Heatmap');
      $block['content'] = '<strong>Select an analysis to display</strong>
               <div id="select_analysis" style="margin-bottom: 0.5rem"></div>
               <div id="select_props" style="margin-bottom: 0.5rem">
                 <strong>Select a property to sort</strong><br/>
               </div>
               <div id="expression_heat_map_canvas"></div>
               <a id="heatmap_download">
                 Download expression data for these features
               </a>';

      drupal_add_js(drupal_get_path('module',
          'tripal_analysis_expression') . '/theme/js/plotly-latest.min.js',
        ['weight' => -999]);
      drupal_add_js(['tripal_analysis_expression' => ['data' => $heatmap]],
        ['type' => 'setting', 'weight' => -998]);
      drupal_add_js(['tripal_analysis_expression' => ['baseURL' => $base_url]],
        ['type' => 'setting', 'weight' => -997]);
      drupal_add_js(drupal_get_path('module',
          'tripal_analysis_expression') . '/theme/js/heatmap.js',
        ['weight' => -996]);
    } else {
      $block['subject'] = '';
      if (isset($_GET['heatmap_feature_uniquename']) && !empty($_GET['heatmap_feature_uniquename'])) {
        $block['content'] = t('<p style="color:red; font-weight: bold; margin-top: 20px">
                                There is no expression data available for the
                                features you entered.
                               </p>');
      }
    }
  }
}

function tripal_analysis_expression_entity_delete($entity, $type)
{
  if ($entity->chado_table == 'analysis') {

    $analysis_id = $entity->chado_record->analysis_id;
    $analysis_cvterm_id = chado_get_cvterm(['name' => 'analysis'])->cvterm_id;

    $results = chado_query('
      SELECT feature_cvterm_id
      FROM {feature_cvtermprop} p
      WHERE p.type_id=:analysis_cvterm_id
      AND p.value=:analysis_id', [
      ':analysis_cvterm_id' => $analysis_cvterm_id,
      ':analysis_id' => $analysis_id,
    ])->fetchAll();

    $feature_cvterm_ids = [];
    foreach ($results as $result) {
      $feature_cvterm_ids[] = $result->feature_cvterm_id;
    }

    if (!empty($feature_cvterm_ids)) {
      db_delete('chado.feature_cvterm')
        ->condition('feature_cvterm_id', $feature_cvterm_ids)
        ->execute();
    }
  }
}
